import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
from matplotlib.pylab import rcParams
rcParams['figure.figsize'] = 15,6

data = pd.read_csv('D://Geetha/Examples/Python/Time series/Airpassengers.csv')
data.head()
print data.dtypes

dataparse = lambda dates : pd.datetime.strptime(dates, '%Y-%m')
data = pd.read_csv('D://Geetha/Examples/Python/Time series/Airpassengers.csv', parse_dates=['Month'],
        index_col='Month', date_parser=dataparse)

print data.head()

ts = data['#Passengers']
ts.head(10)

from statsmodels.tsa.stattools import adfuller
def test_stationarity(ts):
    rolmean = pd.rolling_mean(ts, window=12)
    rolstd = pd.rolling_std(ts, window=12)
    
    org = plt.plot(ts, color = 'blue', label = 'original')
    mean = plt.plot(rolmean, color = 'red', label = 'mean')
    std = plt.plot(rolstd, color = 'green', label = 'std')
    plt.legend(loc = 'best')
    plt.title("Rolling mean and standard deviation")
    plt.show(block = False)

test_stationarity(ts)

ts_log = np.log(ts)
plt.plot(ts_log)

#Moving Average

moving_avg = pd.rolling_mean(ts_log, 12)
plt.plot(ts_log)
plt.plot(moving_avg, color = 'red')


ts_log_moving_avg_diff = ts_log - moving_avg
ts_log_moving_avg_diff.head(12)

ts_log_moving_avg_diff.dropna(inplace=True)
test_stationarity(ts_log_moving_avg_diff)

#Exponential weighted moving average

expweighted_avg = pd.ewma(ts_log,halflife= 12)
plt.plot(ts_log)
plt.plot(expweighted_avg, color = 'red')

ts_log_emma_dif = ts_log - expweighted_avg
test_stationarity(ts_log_emma_dif)

#removing trend and seasonality - Differencing

ts_log_diff = ts_log - ts_log.shift()
plt.plot(ts_log_diff)

ts_log_diff.dropna(inplace=True)
test_stationarity(ts_log_diff)

#removing trend and seasonality - Decompose

from statsmodels.tsa.seasonal import seasonal_decompose
decomposition = seasonal_decompose(ts_log)

trend = decomposition.trend
seasonal = decomposition.seasonal
residual = decomposition.resid

plt.subplot(411)
plt.plot(ts_log, label = 'Original')
plt.legend (loc = 'best')
plt.subplot(412)
plt.plot(trend, label='Trend')
plt.legend(loc='best')
plt.subplot(413)
plt.plot(seasonal,label='Seasonality')
plt.legend(loc='best')
plt.subplot(414)
plt.plot(residual, label='Residuals')
plt.legend(loc='best')
plt.tight_layout()

